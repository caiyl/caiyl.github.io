<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FactoryBean一探究竟.md</title>
    <link href="/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/"/>
    <url>/2023/06/29/FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/</url>
    
    <content type="html"><![CDATA[<h2 id="Factorybean是什么？"><a href="#Factorybean是什么？" class="headerlink" title="Factorybean是什么？"></a>Factorybean是什么？</h2><p>factorybean是spring的一个接口类，是spring的一个扩展点之一。先来看一下具体的用法吧，不多说，上代码。源码</p><p>创建一个普通的类UserService，注意这个类没加任何注解。<a href="https://github.com/caiyl/cai.git">代码链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chase.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chase</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/24 4:21 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>       log.info(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个依赖了UserService的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chase.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chase</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/3/3 3:03 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建一个实现了FactoryBean接口的类，并重写**T getObject() throws Exception;<strong>和</strong>Class&lt;?&gt; getObjectType();**两个方法,注意该类加了注解@Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chase.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chase</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/24 4:21 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserService&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;创建UserService对象&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> UserService.class;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>启动spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chase;<br><br><span class="hljs-keyword">import</span> com.chase.service.LoginService;<br><span class="hljs-keyword">import</span> com.chase.service.UserService;<br><span class="hljs-keyword">import</span> com.chase.service.UserServiceFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chase</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/2/24 4:20 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BootApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> SpringApplication.run(BootApp.class, args);<br><br><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;userServiceFactoryBean&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;bean userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean <span class="hljs-keyword">instanceof</span> UserServiceFactoryBean));<br>        System.out.println(<span class="hljs-string">&quot;bean userServiceFactoryBean instanceof UserService:&quot;</span>+(bean <span class="hljs-keyword">instanceof</span> UserService));<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;&amp;userServiceFactoryBean&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;&amp;userServiceFactoryBean instanceof UserServiceFactoryBean:&quot;</span>+(bean1 <span class="hljs-keyword">instanceof</span> UserServiceFactoryBean));<br>        System.out.println(<span class="hljs-string">&quot;&amp;userServiceFactoryBean instanceof UserService:&quot;</span>+(bean1 <span class="hljs-keyword">instanceof</span> UserService));<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginService <span class="hljs-title function_">getLoginService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginService</span>(userService);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="./FactoryBean一探究竟-md/1677828665083.jpg" alt="image-20230303152959177" style="zoom:50%;" /><p><strong>通过UserServiceFactoryBean创建了UserService对象的bean</strong>。</p><p><strong>什么时候调用FactoryBean的getObject创建对象？</strong></p><p>从控制台打印的结果可以看出，在spring容器启动完成前，会调用getObject方法，创建对象。一定是这样吗。下面我们注释一下以下代码，再跑一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    @Bean</span><br><span class="hljs-comment">//    public LoginService getLoginService(UserService userService) &#123;</span><br><span class="hljs-comment">//        return new LoginService(userService);</span><br><span class="hljs-comment">//    &#125;</span><br></code></pre></td></tr></table></figure><img src="./FactoryBean一探究竟-md/1677834219275.jpg" alt="image-20230303152959177" style="zoom:50%;" /><p>为什么是spring容器启动完了才创建对象呢？在getObject方法入口处打个断点，看下堆栈信息如下</p><p><img src="/./FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/1.jpg" alt="image-20230303172002986"></p><p>由此可见spring容器启动不会创建对象，当你需要用到factorybean里的对象是，才会进行初始化对象。再放开上面的代码注释，打个断点执行观察如下图</p><p><img src="/./FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/2.jpg" alt="image-20230303173015635"></p><p><strong>上图可以看出在spring容器启动初始化阶段，由于创建LoginService类的bean需要userService，所以spring会去容器内部通过getBean获取UserService对象，发现不存在UserService对象时，找到能创建UserService对象的FactoryBean对象创建。</strong> 总结一下<strong>需要才创建</strong></p><p><strong>直接在UserService类加@Service注解不是更香吗，为什么要有这个骚操作创建对象</strong></p><p>假如要创建的对象很复杂，假如bean对象没有实现类呢，有没有那些地方用到了这个Factorybean值得学习的呢？当然有，要不然不就白白浪费了。其中大名鼎鼎的mybaits，还有spring cloud家族的OpenFeign都用到了。</p><p><img src="/./FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/3.png" alt="image-20230303173015635"></p><p><img src="/./FactoryBean%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F-md/4.png" alt="image-20230303173015635"></p><p>这两个factoryBean都是利用动态代理生产代理类，交给spring容器管理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环依赖</title>
    <link href="/2023/06/29/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <url>/2023/06/29/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
